generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  DROPPED
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
}

enum NotificationType {
  ANNOUNCEMENT
  REMINDER
  DEADLINE
  SYSTEM
}

model User {
  id            String             @id @default(cuid())
  email         String             @unique
  passwordHash  String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  profile       Profile?
  roles         UserRole[]
  enrollments   Enrollment[]
  submissions   Submission[]
  notifications Notification[]
  auditLogs     AuditLog[]
  threads       DiscussionThread[] @relation("ThreadAuthor")
  posts         DiscussionPost[]   @relation("PostAuthor")
  assignments   Assignment[]       @relation("AssignmentCreator")
  announcements Announcement[]     @relation("AnnouncementAuthor")
  grades        Grade[]            @relation("GraderUser")
}

model Role {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  users       UserRole[]
}

model UserRole {
  userId     String
  roleId     Int
  assignedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model Profile {
  id        String  @id @default(cuid())
  userId    String  @unique
  firstName String
  lastName  String
  bio       String?
  avatarUrl String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id            String            @id @default(cuid())
  slug          String            @unique
  title         String
  description   String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  modules       CourseModule[]
  enrollments   Enrollment[]
  assignments   Assignment[]
  quizzes       Quiz[]
  threads       DiscussionThread[]
  announcements Announcement[]
}

model CourseModule {
  id        String  @id @default(cuid())
  courseId  String
  slug      String
  title     String
  summary   String?
  position  Int     @default(0)

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]

  @@unique([courseId, slug])
  @@index([courseId, position])
}

model Lesson {
  id        String  @id @default(cuid())
  moduleId  String
  slug      String
  title     String
  summary   String?
  position  Int     @default(0)

  module        CourseModule  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  assignments   Assignment[]
  quizzes       Quiz[]

  @@unique([moduleId, slug])
  @@index([moduleId, position])
}

model ContentBlock {
  id       String @id @default(cuid())
  lessonId String
  type     String
  position Int    @default(0)
  content  Json?

  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@index([lessonId, position])
}

model Enrollment {
  id         String           @id @default(cuid())
  userId     String
  courseId   String
  status     EnrollmentStatus @default(ACTIVE)
  enrolledAt DateTime         @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  grades Grade[]

  @@unique([userId, courseId])
}

model Assignment {
  id          String   @id @default(cuid())
  lessonId    String
  courseId    String?
  title       String
  description String?
  dueAt       DateTime?
  createdById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  course Course? @relation(fields: [courseId], references: [id], onDelete: SetNull)
  creator User? @relation("AssignmentCreator", fields: [createdById], references: [id], onDelete: SetNull)
  submissions Submission[]
  grades      Grade[]

  @@index([lessonId])
  @@index([courseId])
}

model Submission {
  id           String   @id @default(cuid())
  assignmentId String
  studentId    String
  submittedAt  DateTime @default(now())
  content      Json?

  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student    User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  grade      Grade?

  @@unique([assignmentId, studentId])
}

model Quiz {
  id          String   @id @default(cuid())
  lessonId    String
  courseId    String?
  title       String
  description String?
  timeLimit   Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  course Course? @relation(fields: [courseId], references: [id], onDelete: SetNull)
  questions QuizQuestion[]
  grades    Grade[]

  @@index([lessonId])
  @@index([courseId])
}

model QuizQuestion {
  id           String       @id @default(cuid())
  quizId       String
  prompt       String
  explanation  String?
  position     Int          @default(0)
  questionType QuestionType @default(SINGLE_CHOICE)

  quiz     Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  QuizOption[]

  @@index([quizId, position])
}

model QuizOption {
  id         String  @id @default(cuid())
  questionId String
  text       String
  isCorrect  Boolean @default(false)

  question QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Grade {
  id           String   @id @default(cuid())
  enrollmentId String
  assignmentId String?
  quizId       String?
  submissionId String?
  score        Float
  maxScore     Float
  gradedAt     DateTime @default(now())
  gradedById   String?

  enrollment Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  assignment Assignment? @relation(fields: [assignmentId], references: [id], onDelete: SetNull)
  quiz       Quiz?       @relation(fields: [quizId], references: [id], onDelete: SetNull)
  submission Submission? @relation(fields: [submissionId], references: [id], onDelete: SetNull)
  gradedBy   User?       @relation("GraderUser", fields: [gradedById], references: [id], onDelete: SetNull)

  @@index([enrollmentId])
  @@index([assignmentId])
  @@index([quizId])
}

model DiscussionThread {
  id        String   @id @default(cuid())
  courseId  String
  authorId  String
  title     String
  status    String   @default("OPEN")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  author User   @relation("ThreadAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  posts  DiscussionPost[]

  @@index([courseId])
}

model DiscussionPost {
  id        String   @id @default(cuid())
  threadId  String
  authorId  String
  parentId  String?
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  thread DiscussionThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  author User             @relation("PostAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  parent DiscussionPost?  @relation("DiscussionReplies", fields: [parentId], references: [id], onDelete: SetNull)
  replies DiscussionPost[] @relation("DiscussionReplies")

  @@index([threadId])
}

model Announcement {
  id          String   @id @default(cuid())
  courseId    String
  authorId    String
  title       String
  message     String
  publishedAt DateTime @default(now())
  expiresAt   DateTime?

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  author User   @relation("AnnouncementAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([courseId])
}

model Notification {
  id             String           @id @default(cuid())
  userId         String
  announcementId String?
  type           NotificationType
  message        String
  read           Boolean          @default(false)
  metadata       Json?
  createdAt      DateTime         @default(now())

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcement Announcement? @relation(fields: [announcementId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([announcementId])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  entity    String?
  entityId  String?
  metadata  Json?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt])
}
